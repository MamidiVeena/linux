# CMPE 283 ASSIGNMENT 1

##TEAM MEMBERS:
Sai Swarup Rath(014655446)
Veena Mamidi(015226198)


##Questions and Responses:
### 1. For each member in your team, provide 1 paragraph detailing what parts of the lab that member
implemented / researched.

### Sai Swarup Rath:
Made half of the code changes for the .c file(Entry and Exit modules). Added extra comment and reference information with the code.
Researched on the errors faced and explored steps on resolving those errors. Accessed the SDM to get details for controls
details other than for pinbased(such as procbased, entry, exit etc.). Researched on finding resolutions for system issues
such as ubuntu network manager problems, missing libraries etc.

### Veena M:
Made half of the code changes for the .c file(Procbased and Secondary Procbased). Cloned git repo, tried building kernel with initial memory which failed. Redesigned the VM
with more storage space and memory and inserted the module successfully in Ubuntu (VM Ware Workstation 15). Troubleshooted
the different errors (solved by installing the required libraries like flex, libdev, msr-tools etc.). Implemented various libraries,
used steps to resolve issues such as git commit and ubuntu network manager connectivity.


### 2. Describe in detail the steps you used to complete the assignment. Consider your reader to be someone
skilled in software development but otherwise unfamiliar with the assignment. Good answers to this
question will be recipes that someone can follow to reproduce your development steps.

The assignment focuses on the creation of a Linux kernel module to query various MSRs to determine
the virtualization features present in CPU. The module will then report the features it discovers as
system message log.

###Prerequisites:
• A machine capable of running Linux with atleast 200GB space
• Features for VMX virtualization exposed

Step followed to complete the assignment-
For our purposes we have used a windows laptop and used VMware workstation with Ubuntu.
### 1. Install git
- sudo apt-get install git
We first install git inside the ubuntu terminal. This is in-order to get the linux kernel source code for rest of the
steps ahead.

### 2. Download the Linux kernel source code:
- git clone https://github.com/torvalds/linux.git
The linux kernel source code is then pulled using above command after forking the linux repo in our private github
account.

### 3. Build the Linux Kernel using the source code in previous step:
next the linux kernel is built using the source code pulled in previously. Some libraries which were missing were
installed using commands such as sudo apt-get install libidev-dev.
- sudo apt install libudev-dev
- sudo apt-get install libssl-dev
- make menuconfig
- make
- make modules
- make modules_install
- make install


### 4. Code a .c (C language) file that will be used to find the capabilities of the MSRs:
-gedit cmpe283-1.c
After successful build of kernel, we use the ".c" file provided and modify the code inside to get MSR capabilities
details for entry, exit, procbased, secondary procbased and pinbased modules. We then add it inside kernel with
above command.


### 5. Creating new kernel module for MSRs:
-gedit Makefile
File contentobj-
m += cmpe283-1.o
all:
make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
clean:
make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
-make all

### 6. Inserting/Loading the specific kernel module into the kernel:
- insmod ./cmpe283-1.ko

### 7. Verify the message buffer/output from the kernel in the system message log:
- dmesg
we used dmesg to get the system message log details as provided for various MSR capabality logs.

### 8. Commit the changes done to the local repository:
- git push
After final output is received post reboot of system, we do a git push to move the makefile and cmpe283-1.c files
to our github account.


##SOME ERRORS ENCOUNTERED DURING VARIOUS STEPS AND RESOLUTIONS:

1)While running the command 'sudo make -j 4' for building the kernel received errors which required installation
of various libraries. These were installed using "sudo apt get-install" and the errors were removed. Post removal of
errors the command ran for around 4 hrs. Another error "stmmac_main.c:3570:1:error: the frame size of 1040 bytes
is larger than 1024 bytes[-Werror=frame-larger-than=]" was encountered. We found out that it was a memory issue
and then changed the memory by going to settings and allocating more space.

2) The error "Failed to generate  BTF for vmlinux Try to disable CONFIG_DEBUG_INFO_BTF make: *** [MakeFile: 1165: vmlinux]
 Error 1" was encountered. For this the dependency Dwarves was installed for resolution using command
 "sudo apt-get install dwarves".

3) During git push, an error "fatal:unable to access 'https://github.com/MamidiVeena/linux.git/': Could not resolve host
:github.com" was encountered. It was observed that the network manager was not working inside the workstation. So we used
command "sudo service network-manager restart" and then stopped and restarted the workstation again. Post this, the git push
command started working and asked for username and password. Post providing the username and password the commit was
successful and we found the updates made in the github account.








# CMPE 283 ASSIGNMENT 2

Assignment 2: Instrumentation via hypercall


##TEAM MEMBERS:
Sai Swarup Rath(014655446)
Veena Mamidi(015226198)


##Questions and Responses:
### 1. For each member in your team, provide 1 paragraph detailing what parts of the lab that member
implemented / researched.


### Sai Swarup Rath:
For second assignment I first watched the assignment 2&3 video and researched more on creating nested vm in ubuntu system.
Checked and understood where to put the code in vmx.c and cpuid.c files for assignment requirement such as For CPUID leaf node %eax=0x4FFFFFFF. Modified the code in vmx_handle_Exit function. Created a test file and discussed more to correct it. Also
helped in completing documentation. Verified proper output for the instructions.

### Veena M:
Built the kernel. Tried to understand the various requirements for leaf function. Modified the CPUID leaf function in kvm_emulate_cpuid in cpuid.c. Built code for CPUID leaf node %eax=0x4FFFFFFE:. Researched on errors received during running of vmx.c and cpuid.c files. Focused on various errors received while creating nested vm in ubuntu and steps to bypass those errors. Discussed on creating proper user mode program for running various CPUID functions. Verified proper output for the instructions.


### 2. Describe in detail the steps you used to complete the assignment. Consider your reader to be someone
skilled in software development but otherwise unfamiliar with the assignment. Good answers to this
question will be recipes that someone can follow to reproduce your development steps.

##Modification of Kernel code:
Firstly ensure the system is ready to the point of setup till Assignment 1. Then we proceed to build the new linux kernel module. Using the following commands sudo apt-get install libncurses-dev
sudo apt-get install libssl-dev - make menuconfig
 make && make modules && make modules_install && make install // Builds Linux Kernel

Then we modify the code in vmx.c and cpuid.c in arch/x86/kvm/vmx/vmx.c and arch/x86/kvm/cpuid.c . The logic for CPUID leaf node %eax=0x4FFFFFFF: and for CPUID leaf node %eax=0x4FFFFFFE: was used for this assignment. In vmx.c we created variables on exits and  cpu cycles. Additionally in vmx_handle_exit function we calculated the number of exits using inc function and total
time spent processing all exits. In cpuid.c we created a new leaf in kvm_emulate_cpuid function which reads the exits into %eax
and moves high 32 bits of cpu cycles into %ebx and low 32 bits of cpu cycles into %ecx when %eax = 0x4FFFFFFF.

##For nested VM
Next for nested VM we install virt-manager. Download Ubuntu ISO file and create test VM. The commands used to perform these steps are:
  -sudo apt update
  -sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
  -sudo systemctl status libvirtd
  -sudo systemctl enable --now libvirtd
  -sudo apt install virt-manager
  -sudo virt-manager
  -install ubuntu 20.4 iso image


##Inside VM for CPUID tasks
For installing CPUID Package we researched on this link https://packages.ubuntu.com/bionic/admin/cpuid -
and then installed CPUID packages required in ubuntu using sudo apt-get install -y cpuid.


###Output and commands followed for final output
First we modify the files and then run sudo make INSTALL_MOD_STRIP=1 modules install && make install. Post executing this command we then use rmmod kvm and rmmod kvm_intel. Then post running the user program file we get the required output:

![img](https://github.com/MamidiVeena/linux/blob/master/cmpe283/Screen%20Shot%202021-11-29%20at%206.59.42%20PM.png)

##Challenges faced and resolution:
1) After making the code changes at vmx.c and cpuid.c we faced couple of issues related to variables we used for incrementing exit values and fetching the correct output later using CPUID package installation and post creating nested vm in ubuntu system.
So double checked the changes we made and saw how in the assignment video the code was implemented in the two files. Based on that we devised the logic with proper variable assignment and in correct function places to resolve the issue.

2) Sometimes when we tried to create nested vm we faced a lot of issues due to some missing packages and unable to install all modules, updating all files including the user program etc. By researching more on ubuntu and nested vm error handling we were able to fix issues that we got and modify our code accordingly to accomodate all changes.


#########################################################
For Assignment- 2, Code files were pushed to this location on time 'https://github.com/MamidiVeena/linux/tree/master/cmpe283' as we couldn't push to linux folder due to few unresolved GIT issues.
#########################################################










# CMPE 283 ASSIGNMENT 3
Assignment 3: Instrumentation via hypercall


##TEAM MEMBERS:
Sai Swarup Rath(014655446)
Veena Mamidi(015226198)


##Questions and Responses:
### 1. For each member in your team, provide 1 paragraph detailing what parts of the lab that member
implemented / researched.


### Sai Swarup Rath:
For third assignment we built the homework based on assignment 2 setup and hence no additional configuartion was needed.
Checked and understood where to put the code in vmx.c and cpuid.c files for assignment requirement such as For CPUID leaf node %eax=0x4FFFFFFD. Modified the code in vmx_handle_Exit function. Created a test file and discussed more to correct it. Also
helped in completing documentation. Verified proper output for the instructions.

### Veena M:
Researched on the various requirements for leaf function. Modified the CPUID leaf function in kvm_emulate_cpuid in cpuid.c. Built code for CPUID leaf node %eax=0x4FFFFFFC:. Researched on errors received during running of vmx.c and cpuid.c files. Focused on various errors received while creating nested vm in ubuntu and steps to bypass those errors. Discussed on creating proper user mode program for running various CPUID functions. Verified proper output for the instructions.


### 2. Describe in detail the steps you used to complete the assignment. Consider your reader to be someone
skilled in software development but otherwise unfamiliar with the assignment. Good answers to this
question will be recipes that someone can follow to reproduce your development steps.

Steps Used to Complete The Assignment:		
Prerequirement: System till assignment 2 setup complete
Step 1: Ensure your system is ready to the point of setup till Assignment 1.
Step 2: Build the new linux kernel module.
Step 3 - We then build the KVM module only, and used the command: 

sudo make -j 8 modules M=arch/x86/kvm
sudo make INSTALL_MOD_STRIP=1 modules_install && make install
lsmod | grep kvm

rmmod kvm_intel
rmmod kvm
modprobe kvm
modprobe kvm_intel

step 4- we then removed older modules using rmmod kvm_intel and rmmod kvm

step 5-Inserted new modules using 
sudo insmod arch/x86/kvm/kvm.ko

sudo insmod arch/x86/kvm/kvm-intel.ko


step6- after the innervm was rebooted we ensured that cupid is installed and then ran the test script. We gave few exit numbers and checked if desired output is obtained or not.

##### Questions:

Q3. Comment on the frequency of exits – does the number of exits increase at a stable rate? Or are there more exits performed during certain VM operations? Approximately how many exits does a full VM boot entail?

The frequency of exits didn't increase at a stable rate. More exits were noticed when performing few VM operations. Exits were performed highest when at exit 12. A full vm reboot in our system took approximately around 151,000 exits for 0x4FFFFFFF.


Q4. Of the exit types defined in the SDM, which are the most frequent? Least?

Most frequent exit types are 
#### Exit Number 12 - HLT
#### Exit Number 1 - Exception Interrupt
#### Exit Number 7 - Interrupt window
#### Exit number 48 - EPT Violation


Least frequest exit types are
#### Exit number 29 - MOV DR
#### Exit number 55 - XSETBV


